from flask import Flask, request,jsonify
import pymongo
from flask_cors import CORS

myclient = pymongo.MongoClient("mongodb+srv://pg:prabha%40atlas@cluster0.uvmcv.mongodb.net/")
mydb = myclient["food_app"]

app = Flask(_name_)
CORS(app)

@app.route('/createUser', methods=['POST'])
def createUser():
    if(request.method == 'POST'):
        userpic = request.form['userpic']
        userorgname= request.form['userorgname']
        username = request.form['username']
        password = request.form['password']
        phone = request.form['phone']
        mailid = request.form['mailid']
        address = request.form['address']
        userpic = userpic.replace('\n', '+')
        userpic = userpic.replace(' ', '+')

        mycol = mydb["userdata"]
        mydict = {"_id": username, "userpic": userpic, "userorgname": userorgname, "password": password, "phone": phone, "mailid": mailid, "address": address}
        try:
            x = mycol.insert_one(mydict)
            return "true"
        except:
            return "false"

@app.route('/loginUser', methods=['POST'])
def loginUser():
    if(request.method == 'POST'):
        username = request.form['username']
        password = request.form['password']
        mycol = mydb["userdata"]
        try:
            mydict = {}
            for x in mycol.find({"_id": username}, {"_id": 1, "password": 1}):
                mydict=x
            if(mydict["password"]==password):
                return "success"
            else:
                return "invalid password"
        except:
            return "no user"


@app.route('/infoUser', methods=['POST'])
def infoUser():
    if(request.method == 'POST'):
        username = request.form['username']
        mycol = mydb["userdata"]
        try:
            mydict = {}
            for x in mycol.find({"_id": username}, {"_id": 1, "userpic": 1, "userorgname": 1, "password": 1, "phone": 1, "mailid": 1, "address": 1}):
                mydict=x
            return mydict
        except:
            return "no user"



@app.route('/infoFood', methods=['GET','POST'])
def infoFood():
    mycol = mydb["foodlist"]
    try:
        myfood = []
        for x in mycol.find({}, {"_id": 1,"foodpic": 1,"foodprice": 1,"foodpreptime": 1,"foodavailability": 1,"foodtype": 1}):
            myfood.append(x)
        return jsonify(myfood)
    except:
        return "no food"


@app.route('/addFood', methods=['POST'])
def addFood():
    if(request.method == 'POST'):
        foodname = request.form['foodname']
        foodpic = request.form['foodpic']
        foodprice = request.form['foodprice']
        foodpreptime = request.form['foodpreptime']
        foodavailability = request.form['foodavailability']
        foodtype = request.form['foodtype']
        foodpic = foodpic.replace('\n', '+')
        foodpic = foodpic.replace(' ', '+')

        mycol = mydb["foodlist"]
        mydict = {"_id": foodname,"foodpic": foodpic,"foodprice": foodprice,"foodpreptime": foodpreptime,"foodavailability": foodavailability,"foodtype": foodtype}
        try:
            x = mycol.insert_one(mydict)
            return "true"
        except:
            return "false"



@app.route('/placeOrder', methods=['POST'])
def placeOrder():
    if(request.method == 'POST'):
        username = request.form['username']
        usernumber = request.form['usernumber']
        useraddress = request.form['useraddress']
        foodname = request.form['foodname']
        foodprice = request.form['foodprice']
        foodquantity = request.form['foodquantity']
        totalbill = request.form['totalbil']
        orderdatetime = request.form['orderdatetime']
        deliverydatetime = request.form['deliverydatetime']
        deliverystatus = request.form['deliverystatus']
        transaction = request.form['transaction']

        mycol = mydb["orders"]
        mydict = {"customerusername": username,"customernumber": usernumber,"customeraddress": useraddress,"foodname": foodname,"foodprice": foodprice,"foodquantity": foodquantity,"totalbill": totalbill,"orderdatetime": orderdatetime,"deliverydatetime": deliverydatetime,"deliverystatus": deliverystatus,"transaction": transaction}
        try:
            x = mycol.insert_one(mydict)
            return "true"
        except:
            return "false"


@app.route('/createDm', methods=['POST'])
def createDm():
    if(request.method == 'POST'):
        dmpic = request.form['dmpic']
        dmorgname= request.form['dmorgname']
        dmname = request.form['dmname']
        password = request.form['password']
        phone = request.form['phone']
        mailid = request.form['mailid']
        address = request.form['address']
        rating = request.form['rating']
        review = request.form['review']
        deliverycount = request.form['deliverycount']
        dmpic = dmpic.replace('\n', '+')
        dmpic = dmpic.replace(' ', '+')
        mycol = mydb["deliverymandata"]
        mydict = {"_id": dmname, "dmpic": dmpic, "dmorgname": dmorgname, "password": password, "phone": phone, "mailid": mailid, "Address": address, "rating": rating, "review": review, "deliverycount": deliverycount}
        try:
            x = mycol.insert_one(mydict)
            return "true"
        except:
            return "false"


@app.route('/loginDm', methods=['POST'])
def loginDm():
    if(request.method == 'POST'):
        dmname = request.form['dmname']
        password = request.form['password']
        mycol = mydb["deliverymandata"]
        try:
            mydict = {}
            for x in mycol.find({"_id": dmname}, {"_id": 1, "password": 1}):
                mydict=x
            if(mydict["password"]==password):
                return "success"
            else:
                return "invalid password"
        except:
            return "no user"


@app.route('/infoDm', methods=['POST'])
def infoDm():
    if(request.method == 'POST'):
        dmname = request.form['dmname']
        mycol = mydb["deliverymandata"]
        try:
            mydict = {}
            for x in mycol.find({"_id": dmname}, {"_id": 1, "dmpic": 1, "dmorgname": 1, "password": 1, "phone": 1, "mailid": 1, "address": 1, "rating": 1, "review": 1, "deliverycount": 1}):
                mydict=x
            return mydict
        except:
            return "no user"


if _name_ == '_main_':
    app.run(debug=True)




URL
https://apifoodapp.herokuapp.com